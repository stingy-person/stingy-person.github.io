{"meta":{"title":"铁公鸡","subtitle":"业精于勤荒于嬉","description":"总结平时学习以及工作上遇到的一些坑","author":"铁公鸡","url":"https://stingy-person.github.io","root":"/"},"pages":[{"title":"","date":"2022-01-01T07:02:53.339Z","updated":"2022-01-01T07:02:53.339Z","comments":true,"path":"404.html","permalink":"https://stingy-person.github.io/404.html","excerpt":"","text":"404"},{"title":"书单","date":"2020-10-18T01:23:24.649Z","updated":"2020-10-18T01:23:24.649Z","comments":false,"path":"books/index.html","permalink":"https://stingy-person.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-10-18T01:23:24.650Z","updated":"2020-10-18T01:23:24.650Z","comments":false,"path":"categories/index.html","permalink":"https://stingy-person.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-10-18T01:23:24.648Z","updated":"2020-10-18T01:23:24.648Z","comments":false,"path":"about/index.html","permalink":"https://stingy-person.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"友情链接","date":"2020-10-18T01:23:24.651Z","updated":"2020-10-18T01:23:24.651Z","comments":true,"path":"links/index.html","permalink":"https://stingy-person.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-10-18T01:23:24.652Z","updated":"2020-10-18T01:23:24.652Z","comments":false,"path":"repository/index.html","permalink":"https://stingy-person.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-10-18T01:23:24.653Z","updated":"2020-10-18T01:23:24.653Z","comments":false,"path":"tags/index.html","permalink":"https://stingy-person.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JAVA学习材料","slug":"back-end/JAVA/learning_materials/learning_materials","date":"2022-06-19T15:35:40.690Z","updated":"2022-06-21T16:40:08.539Z","comments":true,"path":"2022/06/19/back-end/JAVA/learning_materials/learning_materials/","link":"","permalink":"https://stingy-person.github.io/2022/06/19/back-end/JAVA/learning_materials/learning_materials/","excerpt":"","text":"算法第四版 labuladong的刷题笔记V2.4 labuladong的算法秘籍V2.4","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://stingy-person.github.io/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://stingy-person.github.io/tags/JAVA/"}]},{"title":"Vue+Electron+Element搭建桌面应用开发","slug":"front-end/desktop_application_construction/desktop_application_construction","date":"2022-06-12T22:43:43.328Z","updated":"2022-06-19T15:17:06.306Z","comments":true,"path":"2022/06/13/front-end/desktop_application_construction/desktop_application_construction/","link":"","permalink":"https://stingy-person.github.io/2022/06/13/front-end/desktop_application_construction/desktop_application_construction/","excerpt":"","text":"资料来源 https://blog.csdn.net/DDDHL_/article/details/124483585 1.创建Vue工程 1234567# 选择vue3vue create front-end# 测试命令cd front-endnpm run serve# 本地可打开界面 2. 安装router 1npm -i vue-router@4 2.1创建路由文件 在项目的 src 目录下创建 router/index.js 。内容如下： 1234567891011121314import &#123; createRouter, createWebHashHistory &#125; from &#x27;vue-router&#x27;const routes = [ &#123; path: &#x27;/&#x27;, component: () =&gt; import(&#x27;@/components/HelloWorld&#x27;), &#125;,]export const router = createRouter(&#123; history: createWebHashHistory(), routes: routes,&#125;)export default router 2.2main.js 注册 12import router from &#x27;./router&#x27;createApp(App).use(router).mount(&#x27;#app&#x27;) 2.3App.vue 在 App.vue 中加入 就可以测试是否安装成功啦 （把原本组件的代码删掉） 3.安装 Vuex（按需安装） 1npm i vuex -s 3.1创建store文件 在项目的 src 目录下创建 store/index.js 。内容如下： 12345678910import &#123; createStore &#125; from &#x27;vuex&#x27;export default createStore(&#123; state: &#123; test: &#x27;测试一下哈哈哈&#x27;, &#125;, mutations: &#123;&#125;, actions: &#123;&#125;, modules: &#123;&#125;,&#125;) 3.2main.js 注册 12import store from &#x27;./store&#x27;createApp(App).use(store).use(router).mount(&#x27;#app&#x27;) 3.3测试 HelloWorld.vue 。控制台有输出就可以了 12345678import &#123; useStore &#125; from &#x27;vuex&#x27;export default &#123; name: &#x27;HelloWorld&#x27;, setup() &#123; const store = useStore() console.log(store.state.test) &#125;&#125; 4.安装 Sass（按需安装） 1npm i node-sass sass-loader style-loader -d 4.1测试 组件中 不报错即可 5.element-Plus（按需安装） 12npm install element-plus --savenpm install -D unplugin-vue-components unplugin-auto-import 在项目的 webpack.config.js 添加代码。完整示例如下： 123456789101112131415161718const &#123; defineConfig &#125; = require(&#x27;@vue/cli-service&#x27;)const AutoImport = require(&#x27;unplugin-auto-import/webpack&#x27;)const Components = require(&#x27;unplugin-vue-components/webpack&#x27;)const &#123; ElementPlusResolver &#125; = require(&#x27;unplugin-vue-components/resolvers&#x27;)module.exports = defineConfig(&#123; transpileDependencies: true, configureWebpack: &#123; plugins: [ AutoImport(&#123; resolvers: [ElementPlusResolver()], &#125;), Components(&#123; resolvers: [ElementPlusResolver()], &#125;), ], &#125;,&#125;) 6.安装 Electron 123# 版本选择13.0vue add electron-buildernpm run electron:serve FAQ 1.启动慢 问题截图： 问题解决方法： 1npm install electron-devtools-installer background.js(注释掉红框代码)","categories":[{"name":"前端","slug":"前端","permalink":"https://stingy-person.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://stingy-person.github.io/tags/Vue/"},{"name":"Electron","slug":"Electron","permalink":"https://stingy-person.github.io/tags/Electron/"},{"name":"Element","slug":"Element","permalink":"https://stingy-person.github.io/tags/Element/"}]},{"title":"JDK下载","slug":"back-end/JAVA/jdk_download/jdk_download","date":"2022-05-16T15:22:27.995Z","updated":"2022-05-16T15:34:31.036Z","comments":true,"path":"2022/05/16/back-end/JAVA/jdk_download/jdk_download/","link":"","permalink":"https://stingy-person.github.io/2022/05/16/back-end/JAVA/jdk_download/jdk_download/","excerpt":"","text":"华为(毕昇) https://mirrors.huaweicloud.com/java/jdk/ Oracle https://www.oracle.com/java/technologies/downloads","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://stingy-person.github.io/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://stingy-person.github.io/tags/JAVA/"},{"name":"JDK","slug":"JDK","permalink":"https://stingy-person.github.io/tags/JDK/"}]},{"title":"配置格式化模板","slug":"back-end/JAVA/code_format/code_format","date":"2022-05-15T14:33:57.853Z","updated":"2022-06-19T15:14:41.944Z","comments":true,"path":"2022/05/15/back-end/JAVA/code_format/code_format/","link":"","permalink":"https://stingy-person.github.io/2022/05/15/back-end/JAVA/code_format/code_format/","excerpt":"","text":"1. 下载格式化模板文件 下载地址：https://github.com/alibaba/p3c/tree/master/p3c-formatter eclipse-codestyle.xml eclipse-codetemplate.xml 2. 安装插件 Adapter for Eclipse Code Formatter Alibaba Java Coding Guidelines 3. 配置 3.1 配置格式化模板 选择下载的eclipse-codestyle.xml配置文件 3.2 代码注释模板配置 3.2.1 类 123456/** * * * @author $&#123;USER&#125; * @date $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; */ 3.2.2 接口 123456/** * * * @author $&#123;USER&#125; * @date $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; */ 3.2.3 枚举 123456/** * * * @author $&#123;USER&#125; * @date $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; */ 3.2.4 注解 123456/** * * * @author $&#123;USER&#125; * @date $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; */","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://stingy-person.github.io/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://stingy-person.github.io/tags/JAVA/"},{"name":"Format","slug":"Format","permalink":"https://stingy-person.github.io/tags/Format/"}]},{"title":"FFmpeg使用","slug":"back-end/Ffmpeg/ffmpeg_install","date":"2022-01-17T11:28:45.677Z","updated":"2022-06-05T04:05:13.608Z","comments":true,"path":"2022/01/17/back-end/Ffmpeg/ffmpeg_install/","link":"","permalink":"https://stingy-person.github.io/2022/01/17/back-end/Ffmpeg/ffmpeg_install/","excerpt":"","text":"1.下载安装 https://github.com/BtbN/FFmpeg-Builds/releases 文件名：ffmpeg-master-latest-win64-lgpl-shared.zip 2.常用命令 123# 下载m3u8文件保存为mp4ffmpeg -i xxxx -c copy xxx.mp4# dos窗口&amp;转义后为：^&amp;","categories":[{"name":"视频流","slug":"视频流","permalink":"https://stingy-person.github.io/categories/%E8%A7%86%E9%A2%91%E6%B5%81/"}],"tags":[{"name":"FFmpeg","slug":"FFmpeg","permalink":"https://stingy-person.github.io/tags/FFmpeg/"}]},{"title":"dosgame部署","slug":"containerized/Docker/docker_dosgame","date":"2022-01-09T05:11:18.961Z","updated":"2022-01-09T07:38:34.288Z","comments":true,"path":"2022/01/09/containerized/Docker/docker_dosgame/","link":"","permalink":"https://stingy-person.github.io/2022/01/09/containerized/Docker/docker_dosgame/","excerpt":"","text":"部署背景 打游戏 资料地址 https://hub.docker.com/r/oldiy/dosgame-web-docker","categories":[{"name":"Docker","slug":"Docker","permalink":"https://stingy-person.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://stingy-person.github.io/tags/Docker/"}]},{"title":"Python Rest请求","slug":"back-end/Python/urllib3_request_call","date":"2022-01-01T02:19:17.892Z","updated":"2022-05-15T13:31:05.084Z","comments":true,"path":"2022/01/01/back-end/Python/urllib3_request_call/","link":"","permalink":"https://stingy-person.github.io/2022/01/01/back-end/Python/urllib3_request_call/","excerpt":"","text":"https忽略证书访问 12345678910# _*_ coding:UTF-8 _*_import urllib3from bs4 import BeautifulSoupurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)if __name__ == &#x27;__main__&#x27;: https = urllib3.HTTPSConnectionPool(&#x27;www.baidu.com&#x27;, port=443, cert_reqs=&#x27;CERT_NONE&#x27;, assert_hostname=False) req = https.request(&#x27;GET&#x27;, &quot;/&quot;) res = req.data.decode(&quot;utf-8&quot;) print(&quot;%s&quot; %(res)) http请求访问 123456789# _*_ coding:UTF-8 _*_import urllib3from bs4 import BeautifulSoupurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)if __name__ == &#x27;__main__&#x27;: http = urllib3.HTTPConnectionPool(&#x27;www.baidu.com&#x27;, port=80) req = http.request(&#x27;GET&#x27;, &quot;/&quot;) res = req.data.decode(&quot;utf-8&quot;) print(&quot;%s&quot; %(res))","categories":[{"name":"Python","slug":"Python","permalink":"https://stingy-person.github.io/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://stingy-person.github.io/tags/Python/"}]},{"title":"Python编译安装","slug":"back-end/Python/python_install","date":"2022-01-01T02:19:17.883Z","updated":"2022-01-03T01:31:33.862Z","comments":true,"path":"2022/01/01/back-end/Python/python_install/","link":"","permalink":"https://stingy-person.github.io/2022/01/01/back-end/Python/python_install/","excerpt":"","text":"安装Python3 12345678910111213## 安装python3yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel libffi-devel libuuid-devel python-devel mysql-devel gcc gcc-c++ make whichwget https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tgztar -zxvf Python-3.7.6.tgzrm -rf Python-3.7.6.tgzcd Python-3.7.6/./configure --prefix=/opt/python3make make installmv /usr/bin/python /usr/bin/python_bakln -s /opt/python3/bin/python3 /usr/bin/pythonln -s /opt/python3/bin/pip3 /usr/bin/pippython -V Python源配置 配置文件路径 C:\\Users\\Administrator.LAPTOP-DV6H7GK0\\AppData\\Roaming\\pip\\pip.ini 源配置 1234567891011mkdir -p ~/.pipcat &gt; ~/.pip/pip.conf &lt;&lt; EOF[global]index-url = https://repo.huaweicloud.com/repository/pypi/simpleextra-index-url = https://mirrors.aliyun.com/pypi/simple https://pypi.tuna.tsinghua.edu.cn/simple[install]trusted-host = repo.huaweicloud.comtimeout = 120EOF","categories":[{"name":"Python","slug":"Python","permalink":"https://stingy-person.github.io/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://stingy-person.github.io/tags/Python/"}]},{"title":"aiphoto环境搭建","slug":"back-end/Python/aiphoto_build","date":"2022-01-01T02:19:17.880Z","updated":"2022-06-19T15:17:06.494Z","comments":true,"path":"2022/01/01/back-end/Python/aiphoto_build/","link":"","permalink":"https://stingy-person.github.io/2022/01/01/back-end/Python/aiphoto_build/","excerpt":"","text":"下载aiphoto源代码 https://github.com/itainf/aiphoto aiphoto-master.zip https://github.com/xuebinqin/U-2-Net U-2-Net-master.zip https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz Python-3.7.0.tgz 安装前准备 安装python3.7 此处仅以centos举例 下载并编译安装python yum源配置 12345678910111213141516171819202122232425# 准备编译安装目录mkdir /opt/cd /opt/# 下载源码wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz# 解压tar xvf Python-3.7.0.tgzcd /opt/Python-3.7.0 # 安装依赖，安装前请自行配置yum源yum -y install make automake gcc-c++ kernel-devel unzip gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel anaconda python3-devel python-devel./configure --prefix=/opt/python3make &amp;&amp; make install# 配置pip库sed -i &#x27;s|^USER_SITE = None|USER_SITE = &quot;/opt/python3/lib/python3.7/site-packages&quot;|g&#x27; /opt/python3/lib/python3.7/site.pysed -i &#x27;s|^USER_BASE = None|USER_BASE = &quot;/opt/python3/&quot;|g&#x27; /opt/python3/lib/python3.7/site.py# 配置执行命令ln -s /opt/python3/bin/python3.7 /usr/bin/python3.7ln -s /opt/python3/bin/pip3.7 /usr/bin/pip3.7# 检查Python安装情况，如下图即为成功 1python3.7 -V 1pip3.7 --version pip源配置 1234567891011121314151617181920# pip源配置 自己视情况而定，此处配置是为了解决服务器下载pip模块慢的问题mkdir -p ~/.pip/touch ~/.pip/pip.conf# 大家注意使用前，手动访问下index-url地址是否可以打开，自己挑选配置# 阿里云镜像源配置cat &gt; ~/.pip/pip.conf &lt;&lt; EOF[golbal]index-url = http://mirrors.aliyun.com/pypi/simpletrusted-host = mirrors.aliyun.comtimeout=6000EOF# 华为云镜像源配置cat &gt; ~/.pip/pip.conf &lt;&lt; EOF[global]index-url = https://repo.huaweicloud.com/repository/pypi/simpletrusted-host = repo.huaweicloud.comtimeout = 120EOF 安装依赖包 12pip3.7 install --upgrade pippip3.7 install scikit-image torch torchvision pymatting rembg cmake dlib 安装conda 12345678910111213141516171819202122232425262728cd /opt/wget -c https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.shbash Miniconda3-latest-Linux-x86_64.sh敲击回车后，输入q键，然后按照如下顺序执行输入yes,敲击回车后在敲击回车即可# 配置命令ln -s ~/miniconda3/bin/conda /usr/bin/# 源配置cat &gt; ~/.condarc &lt;&lt;EOFchannels: - defaultsshow_channel_urls: truedefault_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/rcustom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloudEOF# 安装使用到模块conda install -y pytorch torchvision cudatoolkit=10.2 -c pytorch 安装u2net 1234cd /opt/wget https://codeload.github.com/xuebinqin/U-2-Net/zip/refs/heads/masterunzip U-2-Net-master.zipmv U-2-Net-master u2net 搭建aiphoto 1234cd /opt/wget https://codeload.github.com/itainf/aiphoto/zip/refs/heads/masterunzip aiphoto-master.zipmv aiphoto-master aiphoto","categories":[{"name":"Python","slug":"Python","permalink":"https://stingy-person.github.io/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://stingy-person.github.io/tags/Python/"}]},{"title":"VMware","slug":"server/VMWare/vmware_util","date":"2022-01-01T02:19:17.866Z","updated":"2022-06-19T15:17:06.290Z","comments":true,"path":"2022/01/01/server/VMWare/vmware_util/","link":"","permalink":"https://stingy-person.github.io/2022/01/01/server/VMWare/vmware_util/","excerpt":"","text":"1.CentOS镜像下载 123456789101112Centos镜像下载地址- https://www.centos.org/download/- http://man.linuxde.net/download/CentOS- http://mirrors.btte.net/centos/7/isos/x86_64/ - http://mirrors.cn99.com/centos/7/isos/x86_64/ - http://mirrors.sohu.com/centos/7/isos/x86_64/ - http://mirrors.aliyun.com/centos/7/isos/x86_64/ - http://centos.ustc.edu.cn/centos/7/isos/x86_64/ - http://mirrors.neusoft.edu.cn/centos/7/isos/x86_64/ - http://mirror.lzu.edu.cn/centos/7/isos/x86_64/ - http://mirrors.163.com/centos/7/isos/x86_64/ - http://ftp.sjtu.edu.cn/centos/7/isos/x86_64/ 2.启动停止脚本 1234567891011121314151617181920212223242526272829303132333435363738394041424344@echo offset &#x2F;p operator&#x3D;请输入VM操作指令 Y 启动, N 停止：echo %operator%if &quot;%operator%&quot; &#x3D;&#x3D; &quot;Y&quot; ( call goto start) else ( if &quot;%operator%&quot; &#x3D;&#x3D; &quot;N&quot; ( call goto stop ) else ( echo 指令不正确 goto failed )):start echo ############启动VMWare############ call net start VMAuthdService call net start VMnetDHCP call net start VMUSBArbService call net start VMwareHostd call net start &quot;VMware NAT Service&quot; goto ok:stop echo ##############停止VMWare########## call net stop VMwareHostd call net stop VMAuthdService call net stop VMnetDHCP call net stop &quot;VMware NAT Service&quot; call net stop VMUSBArbService goto ok:ok echo ################################## echo # Execute Success # echo ################################## call timeout &#x2F;T 10 &#x2F;NOBREAK goto end:failed echo ################################## echo # Execute FAILED # echo ################################## call timeout &#x2F;T 5 &#x2F;NOBREAK goto end:end 将以上内容保存在本地(切记保存是一ANSI编码保存,防止出现乱码),存为.bat文件,以管理员身份运行","categories":[{"name":"Other","slug":"Other","permalink":"https://stingy-person.github.io/categories/Other/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://stingy-person.github.io/tags/Windows/"},{"name":"VMware","slug":"VMware","permalink":"https://stingy-person.github.io/tags/VMware/"}]},{"title":"EMQ X Broker编译","slug":"server/Linux/emqx_broker_compile","date":"2022-01-01T02:19:17.833Z","updated":"2021-07-22T15:23:32.147Z","comments":true,"path":"2022/01/01/server/Linux/emqx_broker_compile/","link":"","permalink":"https://stingy-person.github.io/2022/01/01/server/Linux/emqx_broker_compile/","excerpt":"","text":"1. 拉取基础镜像 12345678910docker pull centos:latest# 运行基础镜像run_container_id=$(docker run -it -d --name=emqx --net=host $(docker images | grep centos | grep latest | awk &#x27;&#123;print $3&#125;&#x27;) tail -f /dev/null)docker cp /etc/yum.repos.d/CentOS-Base.repo $&#123;run_container_id&#125;:/etc/yum.repos.d/docker exec -it $&#123;run_container_id&#125; bash# 安装依赖yum install -y gitgit config --global http.sslVerify falsegit config --global http.postBuffer 1024288000 2.安装wxWidgets 12345678910yum -y install bzip2 gcc-c++ gcc glibc-devel make ncurses-devel xmlto perl gtk3 gtk3-devel gtk3-*# 官网下载 https://www.wxwidgets.org/downloads/# 拷贝到容器中docker cp /root/wxWidgets-3.1.5.tar.bz2 $&#123;run_container_id&#125;:/opt/tar -jxvf wxWidgets-3.1.5.tar.bz2cd wxWidgets-3.1.5./configure --with-gtk=3 --without-libjpeg --without-libtiffmake &amp;&amp; make install# 检查安装wx-config --version 3.安装erlang 12345678910cd /opt/wget http://erlang.org/download/otp_src_22.1.tar.gztar xvf otp_src_22.1.tar.gzcd otp_src_22.1yum install -y gcc glibc-devel make ncurses-devel openssl-devel autoconfyum install -y unixODBC unixODBC-devel./configure --prefix=/usr/local/erlangmake &amp;&amp; make installln -sf /usr/local/erlang/bin/erl /usr/local/bin/export PATH=$PATH:/usr/local/erlang/bin/ 4.编译EMQ X Broker 123456# 下载软件包mkdir /optcd /opt/git clone -b v4.3.5 https://github.com/emqx/emqx.gitcd emqxmake","categories":[{"name":"Linux","slug":"Linux","permalink":"https://stingy-person.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://stingy-person.github.io/tags/Linux/"},{"name":"Minio","slug":"Minio","permalink":"https://stingy-person.github.io/tags/Minio/"}]},{"title":"Centos Minio版配置","slug":"server/Linux/centos_minio","date":"2022-01-01T02:19:17.829Z","updated":"2021-07-22T11:55:11.850Z","comments":true,"path":"2022/01/01/server/Linux/centos_minio/","link":"","permalink":"https://stingy-person.github.io/2022/01/01/server/Linux/centos_minio/","excerpt":"","text":"1. 源配置 ali源配置 1234rm -rf /etc/yum.repos.d/*wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.reposed -i -e &#x27;/mirrors.cloud.aliyuncs.com/d&#x27; -e &#x27;/mirrors.aliyuncs.com/d&#x27; /etc/yum.repos.d/CentOS-Base.repoyum makecache 华为源配置 1234rm -rf /etc/yum.repos.d/*wget -O /etc/yum.repos.d/CentOS-Base.repo https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repoyum clean allyum makecache 99.FAQ 配置访问外网 echo “nameserver 114.114.114.114” &gt;&gt;/etc/resolv.conf 忘记密码 https://www.cnblogs.com/molson/p/13493847.html 分配IP https://blog.csdn.net/qq_42247220/article/details/85834418 常用命令 12yum install -y wgetyum install -y net-tools 删除rpm包（并删除依赖） 1yum history list docker-ce 1yum history undo 5","categories":[{"name":"Linux","slug":"Linux","permalink":"https://stingy-person.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://stingy-person.github.io/tags/Linux/"},{"name":"Minio","slug":"Minio","permalink":"https://stingy-person.github.io/tags/Minio/"}]},{"title":"Redis编译及镜像制作","slug":"containerized/Docker/build_reids_image","date":"2022-01-01T02:19:17.776Z","updated":"2021-06-27T09:39:47.582Z","comments":true,"path":"2022/01/01/containerized/Docker/build_reids_image/","link":"","permalink":"https://stingy-person.github.io/2022/01/01/containerized/Docker/build_reids_image/","excerpt":"","text":"制作背景 docker hub中默认下载的镜像运行目录比较分散，为方便统一管理，因此自己制作镜像。 此处记录下相关制作步骤。 配置镜像源 华为云镜像源配置 安装Docker 参考资料 编译Redis 命令如下 script1234567891011121314#!/bin/bashyum install -y wget make gcc gcc-c++ libstdc++-devel net-toolsmkdir -p /opt/rediscd /opt/wget -O redis-6.2.3.tar.gz https://download.redis.io/releases/redis-6.2.3.tar.gz?_ga=2.28225850.76180306.1622212345-587279226.1622212345tar xvf redis-6.2.3.tar.gzrm -rf redis-6.2.3.tar.gzcd /opt/redis-6.2.3/sed -i &#x27;s|^PREFIX?=/usr/local|PREFIX?=/opt/redis/|g&#x27; /opt/redis-6.2.3/src/Makefilemake distclean &amp;&amp; make make installcp -r /opt/redis-6.2.3/redis.conf /opt/redis/tar zcvf redis-6.2.3.tar.gz redis# redis-6.2.3.tar.gz即为可直接用于安装的软件包 制作镜像 拉取基础镜像 script1docker pull centos 制作redis镜像 废话不多说，直接上脚本 script12345678910111213141516171819202122232425262728293031323334353637383940414243444546#!/bin/bashmkdir -p /opt/redis/datacd /opt/redis# 手动将4.1章节编译的redis软件包拷贝/opt/redis目录下# 添加容器内启动脚本cat &gt; /opt/redis/run.sh &lt;&lt;EOF#!/bin/bashexport PATH=\\$PATH:/opt/redis/binmkdir -p /opt/redis/data/logs#修改redis配置sed -i &quot;s|^bind 127.0.0.1|#bind 127.0.0.1|g&quot; /opt/redis/redis.confsed -i &quot;s|^# requirepass foobared|requirepass monkey123456|g&quot; /opt/redis/redis.confsed -i &quot;s|^logfile \\&quot;\\&quot;|logfile /opt/redis/data/logs/redis.log|g&quot; /opt/redis/redis.confsed -i &quot;s|^dir ./|dir /opt/redis/data/|g&quot; /opt/redis/redis.confnohup /opt/redis/bin/redis-server /opt/redis/redis.conf &gt;/dev/null 2&gt;&amp;1 &amp;while truedo sleep 66666doneEOF# 添加Dockerfilecat &gt; /opt/redis/Dockerfile &lt;&lt;EOFFROM centos:latestMAINTAINER huifeidechengxuhou 905280842@qq.comADD redis-6.2.3.tar.gz /opt/COPY run.sh /opt/RUN chmod +x /opt/run.shWORKDIR /opt/ENTRYPOINT [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;/opt/run.sh&quot;]EOF# 制作镜像docker build -t monkey-redis:1.0.0 .# 运行镜像docker run -it -d --name=monkey-redis -p 10005:6379 -v /opt/redis/data:/opt/redis/data monkey-redis:1.0.0 bash# 进入容器docker exec -it $(docker ps -a | grep monkey-redis | awk &#x27;&#123;print $1&#125;&#x27;) bash# 容器内登录数据库/opt/redis/bin/redis-cli 数据库访问截图","categories":[{"name":"Docker","slug":"Docker","permalink":"https://stingy-person.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://stingy-person.github.io/tags/Docker/"}]},{"title":"MySQL镜像制作","slug":"containerized/Docker/build_mysql_image","date":"2022-01-01T02:19:17.772Z","updated":"2022-05-15T13:27:13.741Z","comments":true,"path":"2022/01/01/containerized/Docker/build_mysql_image/","link":"","permalink":"https://stingy-person.github.io/2022/01/01/containerized/Docker/build_mysql_image/","excerpt":"","text":"制作背景 docker hub中默认下载的镜像运行目录比较分散，为方便统一管理，因此自己制作镜像。 此处记录下相关制作步骤。 配置镜像源 华为云镜像源配置 安装Docker 参考资料 制作镜像 拉取基础镜像 script1docker pull centos 制作镜像脚本 废话不多说，直接上脚本 script123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#!/bin/bashmkdir -p /opt/mysqlcd /opt/mysql# 通过wget下载软件包wget https://cdn.mysql.com/archives/mysql-8.0/mysql-8.0.24-linux-glibc2.12-x86_64.tar.xz# 解压软件包tar xvf mysql-*rm -rf mysql-*.tar.xzmv $(ls | grep mysql | awk &#x27;&#123;print $1&#125;&#x27;) mysql# 添加配置文件cat &gt; /opt/mysql/mysql/my.cnf &lt;&lt; EOF[client]default-character-set=utf8mb4port=3306socket=/opt/mysql/log/mysql_client_3306.sockssl-ca=/opt/mysql/data/ca.pemssl-cert=/opt/mysql/data/server-cert.pemssl-key=/opt/mysql/data/server-key.pem# The MySQL server[mysqld]character-set-server=utf8mb4port=3306socket=/opt/mysql/log/mysql_mysqld_3306.sockskip-external-lockingbasedir=/opt/mysqldatadir=/opt/mysql/datalog-error=/opt/mysql/log/mysql_error.logpid-file=/opt/mysql/log/mysql.pidkey_buffer_size=16Mmax_allowed_packet=1Mtable_open_cache=64explicit_defaults_for_timestamp=onlower-case-table-names=1#ssl settingssl-ca=/opt/mysql/data/ca.pemssl-cert=/opt/mysql/data/server-cert.pemssl-key=/opt/mysql/data/server-key.pem# 允许最大连接数max_connections=200# 允许连接失败的次数。max_connect_errors=10EOF# 添加容器内启动脚本cat &gt; /opt/mysql/run.sh &lt;&lt;EOF#!/bin/bashexport PATH=\\$PATH:/opt/mysql/bin:/opt/mysql/support-files# 添加用户和用户组groupadd mysqluseradd -r -g mysql mysqlmkdir -p /opt/mysql/log/# 修改mysql目录权限chown mysql:mysql -R /opt/mysqlyum install -y libaio-devel.x86_64 numactl net-toolssu mysql &lt;&lt;ENDif [ \\$(ls /opt/mysql/data/ | wc -l) == 0 ];then/opt/mysql/bin/mysqld --initialize --user=mysql --basedir=/opt/mysql/ --datadir=/opt/mysql/data --lower-case-table-names=1 &gt; /opt/mysql/log/init.log 2&gt;&amp;1sed -i &#x27;s|^basedir=|basedir=/opt/mysql/|g&#x27; /opt/mysql/support-files/mysql.serversed -i &#x27;s|^datadir=|datadir=/opt/mysql/data/|g&#x27; /opt/mysql/support-files/mysql.serverfiif [ \\$(netstat -anp | grep 3306 | grep LISTEN | wc -l) == 0];then/opt/mysql/support-files/mysql.server startelse/opt/mysql/support-files/mysql.server restartfiENDln -s /usr/lib64/libtinfo.so.6.1 /usr/lib64/libtinfo.so.5cat &gt; /opt/mysql/init.sql &lt;&lt;STOPalter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;monkey123456&#x27;;use mysql;update user set host = &#x27;%&#x27; where user = &#x27;root&#x27; and host=&#x27;localhost&#x27;;ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;monkey123456&#x27;;GRANT ALL ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; ;flush privileges;STOPpassword=\\$(cat /opt/mysql/log/init.log | grep password | awk -F &#x27;localhost: &#x27; &#x27;&#123;print \\$2&#125;&#x27;)mysql -h127.0.0.1 -uroot -p\\$&#123;password&#125; -e &quot;source /opt/mysql/init.sql;&quot; --connect-expired-passwordrm -rf /opt/mysql/init.sqlwhile truedo sleep 66666doneEOF# 在宿主机创建创建数据目录，用于挂载mkdir -p /opt/mysql/data# 添加Dockerfilecat &gt; /opt/mysql/Dockerfile &lt;&lt;EOFFROM centos:latestMAINTAINER huifeidechengxuhou 905280842@qq.comCOPY mysql /opt/mysqlCOPY run.sh /opt/RUN chmod +x /opt/run.shWORKDIR /opt/ENTRYPOINT [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;/opt/run.sh&quot;]EOF# 制作镜像docker build -t monkey-mysql:1.0.0 .# 运行镜像docker run -it -d --name=monkey-mysql -p 3306:3306 -v /opt/mysql/data:/opt/mysql/data monkey-mysql:1.0.0 bash# 进入容器docker exec -it $(docker ps -a | grep monkey-mysql | awk &#x27;&#123;print $1&#125;&#x27;) bash# 容器内登录数据库mysql -uroot -h127.0.0.1 -pmonkey123456 制作镜像截图 运行镜像截图 访问数据截图","categories":[{"name":"Docker","slug":"Docker","permalink":"https://stingy-person.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://stingy-person.github.io/tags/Docker/"}]}],"categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://stingy-person.github.io/categories/JAVA/"},{"name":"前端","slug":"前端","permalink":"https://stingy-person.github.io/categories/%E5%89%8D%E7%AB%AF/"},{"name":"视频流","slug":"视频流","permalink":"https://stingy-person.github.io/categories/%E8%A7%86%E9%A2%91%E6%B5%81/"},{"name":"Docker","slug":"Docker","permalink":"https://stingy-person.github.io/categories/Docker/"},{"name":"Python","slug":"Python","permalink":"https://stingy-person.github.io/categories/Python/"},{"name":"Other","slug":"Other","permalink":"https://stingy-person.github.io/categories/Other/"},{"name":"Linux","slug":"Linux","permalink":"https://stingy-person.github.io/categories/Linux/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://stingy-person.github.io/tags/JAVA/"},{"name":"Vue","slug":"Vue","permalink":"https://stingy-person.github.io/tags/Vue/"},{"name":"Electron","slug":"Electron","permalink":"https://stingy-person.github.io/tags/Electron/"},{"name":"Element","slug":"Element","permalink":"https://stingy-person.github.io/tags/Element/"},{"name":"JDK","slug":"JDK","permalink":"https://stingy-person.github.io/tags/JDK/"},{"name":"Format","slug":"Format","permalink":"https://stingy-person.github.io/tags/Format/"},{"name":"FFmpeg","slug":"FFmpeg","permalink":"https://stingy-person.github.io/tags/FFmpeg/"},{"name":"Docker","slug":"Docker","permalink":"https://stingy-person.github.io/tags/Docker/"},{"name":"Python","slug":"Python","permalink":"https://stingy-person.github.io/tags/Python/"},{"name":"Windows","slug":"Windows","permalink":"https://stingy-person.github.io/tags/Windows/"},{"name":"VMware","slug":"VMware","permalink":"https://stingy-person.github.io/tags/VMware/"},{"name":"Linux","slug":"Linux","permalink":"https://stingy-person.github.io/tags/Linux/"},{"name":"Minio","slug":"Minio","permalink":"https://stingy-person.github.io/tags/Minio/"}]}